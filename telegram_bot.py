#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
import paramiko
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime
import tempfile
import asyncio
import json

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                   level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config():
    try:
        with open('config.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_config = {
            "TOKEN": "YOUR_BOT_TOKEN",
            "ADMIN_IDS": [123456789],
            "SSH_CONFIG": {
                "server1": {
                    "hostname": "your_server_ip",
                    "username": "your_username",
                    "password": "your_password"
                }
            }
        }
        with open('config.json', 'w') as f:
            json.dump(default_config, f, indent=4)
        return default_config

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = load_config()
TOKEN = config['TOKEN']
ADMIN_IDS = config['ADMIN_IDS']
SSH_CONFIG = config['SSH_CONFIG']

def get_container_status_emoji(status: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞."""
    if 'Up' in status:
        return 'üü¢'  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö
    elif 'Exited' in status:
        return 'üî¥'  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö
    elif 'Created' in status:
        return '‚ö™'  # –ë–µ–ª—ã–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö
    elif 'Restarting' in status:
        return 'üü°'  # –ñ–µ–ª—Ç—ã–π –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—â–∏—Ö—Å—è
    elif 'Paused' in status:
        return '‚è∏Ô∏è'  # –ü–∞—É–∑–∞ –¥–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö
    else:
        return '‚ùì'  # –í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤

def format_container_status(status: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ –ø–æ–Ω—è—Ç–Ω—ã–π –≤–∏–¥."""
    if 'Up' in status:
        uptime = status.split('Up ')[1].split(',')[0]
        return f"–ó–∞–ø—É—â–µ–Ω (—Ä–∞–±–æ—Ç–∞–µ—Ç {uptime})"
    elif 'Exited' in status:
        exit_code = status.split('Exited (')[1].split(')')[0]
        return f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∫–æ–¥ –≤—ã—Ö–æ–¥–∞: {exit_code})"
    elif 'Created' in status:
        return "–°–æ–∑–¥–∞–Ω"
    elif 'Restarting' in status:
        return "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è"
    elif 'Paused' in status:
        return "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else:
        return status

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

def get_welcome_message(username: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    return f"""
üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏!*

üëã –ü—Ä–∏–≤–µ—Ç, {username}!

ü§ñ –Ø –≤–∞—à –≤–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ:

üñ• *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥*
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤
‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ—Å—É—Ä—Å–æ–≤
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É

‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏*
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä—ã
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

üîÑ *–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏*
‚Ä¢ –û–±–Ω–æ–≤–ª—è—Ç—å –ø–∞–∫–µ—Ç—ã
‚Ä¢ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä—ã
‚Ä¢ –í—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É üëá
"""

def get_main_menu() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    keyboard = [
        [InlineKeyboardButton(text="üñ• –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data='status')],
        [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏", callback_data='services')],
        [InlineKeyboardButton(text="üîÑ –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data='system')],
        [InlineKeyboardButton(text="üìã –õ–æ–≥–∏", callback_data='logs')],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_reply_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = [
        [KeyboardButton(text="üñ• –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤"), KeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏")],
        [KeyboardButton(text="üèì –ü–∏–Ω–≥"), KeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞")],
        [KeyboardButton(text="üìã –õ–æ–≥–∏"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

async def start(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
        return

    username = message.from_user.first_name
    welcome_text = get_welcome_message(username)
    keyboard = get_reply_keyboard()
    
    await message.answer(welcome_text, reply_markup=keyboard, parse_mode='Markdown')

async def handle_menu(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
        return

    if message.text == "üñ• –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤":
        keyboard = [
            [InlineKeyboardButton(text="üíæ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∏—Å–∫", callback_data='check_disk')],
            [InlineKeyboardButton(text="üß† –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–º—è—Ç—å", callback_data='check_memory')],
            [InlineKeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É", callback_data='check_load')]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await message.answer('üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏:', reply_markup=reply_markup)

    elif message.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏":
        keyboard = [
            [InlineKeyboardButton(text="üåê Nginx", callback_data='service_nginx')],
            [InlineKeyboardButton(text="üóÑ PostgreSQL", callback_data='service_postgresql')],
            [InlineKeyboardButton(text="üê≥ Docker", callback_data='service_docker')]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await message.answer('‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:', reply_markup=reply_markup)

    elif message.text == "üèì –ü–∏–Ω–≥":
        await message.answer(
            "üèì –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8.8.8.8 –∏–ª–∏ google.com):\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ping <–∞–¥—Ä–µ—Å>"
        )

    elif message.text == "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞":
        keyboard = [
            [InlineKeyboardButton(text="‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data='confirm_reboot')],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data='cancel_reboot')]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await message.answer('‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä?', 
                           reply_markup=reply_markup)

    elif message.text == "üìã –õ–æ–≥–∏":
        keyboard = [
            [InlineKeyboardButton(text="üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏", callback_data='logs_system')],
            [InlineKeyboardButton(text="üê≥ Docker –ª–æ–≥–∏", callback_data='logs_docker')],
            [InlineKeyboardButton(text="üåê Nginx –ª–æ–≥–∏", callback_data='logs_nginx')],
            [InlineKeyboardButton(text="üóÑ PostgreSQL –ª–æ–≥–∏", callback_data='logs_postgres')]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await message.answer('üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–æ–≥–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', reply_markup=reply_markup)

    elif message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        help_text = """
üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*

*–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤:*
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç CPU –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã

*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏:*
‚Ä¢ Nginx - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º
‚Ä¢ PostgreSQL - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ Docker - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏

*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /ping <–∞–¥—Ä–µ—Å> - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–∞
‚Ä¢ /start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
"""
        await message.answer(help_text, parse_mode='Markdown')

def execute_ssh_command(server: str, command: str) -> str:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SSH –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."""
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(**SSH_CONFIG[server])
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        stdin, stdout, stderr = client.exec_command(command, timeout=300)
        
        # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
        result = []
        while not stdout.channel.exit_status_ready():
            line = stdout.readline()
            if line:
                result.append(line.strip())
        
        # –ß–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –≤—ã–≤–æ–¥
        remaining = stdout.read().decode()
        if remaining:
            result.append(remaining.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
        error = stderr.read().decode()
        if error:
            result.append(f"–û—à–∏–±–∫–∞: {error}")
        
        client.close()
        return '\n'.join(result)
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

async def show_loading(message: Message, text: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏."""
    await message.edit_text(f"{text}\n\n‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...")

def truncate_text(text: str, max_length: int = 3000) -> str:
    """–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
    if len(text) <= max_length:
        return text
    return text[:max_length] + f"\n\n... (–ø—Ä–æ–ø—É—â–µ–Ω–æ {len(text) - max_length} —Å–∏–º–≤–æ–ª–æ–≤)"

async def save_and_send_log(message: Message, log_content: str, log_type: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥ –≤ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ Telegram."""
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"{log_type}_{timestamp}.log"
    
    with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.log', encoding='utf-8') as temp_file:
        temp_file.write(log_content)
        temp_file.flush()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram –∏—Å–ø–æ–ª—å–∑—É—è FSInputFile
        await message.answer_document(
            document=FSInputFile(temp_file.name, filename=filename),
            caption=f"üìã {log_type} –ª–æ–≥ –æ—Ç {timestamp}"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_file.name)

async def handle_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    await callback.answer()

    if callback.data == 'help':
        help_text = """
üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*

*–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤:*
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç CPU –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã

*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏:*
‚Ä¢ Nginx - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º
‚Ä¢ PostgreSQL - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ Docker - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏

*–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:*
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
‚Ä¢ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞

–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
"""
        keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(help_text, reply_markup=reply_markup, parse_mode='Markdown')

    elif callback.data == 'main_menu':
        reply_markup = get_main_menu()
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

    elif callback.data == 'status':
        keyboard = [
            [InlineKeyboardButton(text="üíæ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∏—Å–∫", callback_data='check_disk')],
            [InlineKeyboardButton(text="üß† –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–º—è—Ç—å", callback_data='check_memory')],
            [InlineKeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É", callback_data='check_load')],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text('üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏:', reply_markup=reply_markup)

    elif callback.data == 'services':
        keyboard = [
            [InlineKeyboardButton(text="üåê Nginx", callback_data='service_nginx')],
            [InlineKeyboardButton(text="üóÑ PostgreSQL", callback_data='service_postgresql')],
            [InlineKeyboardButton(text="üê≥ Docker", callback_data='service_docker')],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text('‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:', reply_markup=reply_markup)

    elif callback.data == 'system':
        keyboard = [
            [InlineKeyboardButton(text="üèì –ü–∏–Ω–≥", callback_data='ping')],
            [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", callback_data='reboot')],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text('üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:', reply_markup=reply_markup)

    elif callback.data == 'ping':
        keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='system')]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(
            "üèì –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8.8.8.8 –∏–ª–∏ google.com):\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ping <–∞–¥—Ä–µ—Å>",
            reply_markup=reply_markup
        )

    elif callback.data == 'reboot':
        keyboard = [
            [InlineKeyboardButton(text="‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data='confirm_reboot')],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data='system')]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text('‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä?', 
                              reply_markup=reply_markup)

    elif callback.data == 'confirm_reboot':
        result = execute_ssh_command('server1', 'sudo reboot')
        keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text('üîÑ –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...', 
                              reply_markup=reply_markup)

    elif callback.data == 'check_disk':
        result = execute_ssh_command('server1', 'df -h')
        keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='status')]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(f'üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:\n```\n{result}\n```', 
                              reply_markup=reply_markup,
                              parse_mode='Markdown')

    elif callback.data == 'check_memory':
        result = execute_ssh_command('server1', 'free -h')
        keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='status')]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(f'üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:\n```\n{result}\n```', 
                              reply_markup=reply_markup,
                              parse_mode='Markdown')

    elif callback.data == 'check_load':
        result = execute_ssh_command('server1', 'top -b -n 1 | head -n 5')
        keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='status')]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(f'üìä –ù–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n```\n{result}\n```', 
                              reply_markup=reply_markup,
                              parse_mode='Markdown')

    elif callback.data.startswith('service_'):
        service = callback.data.split('_')[1]
        if service == 'docker':
            keyboard = [
                [InlineKeyboardButton(text="üìã –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã", callback_data='docker_list_all')],
                [InlineKeyboardButton(text="üìù Dockerfile", callback_data='dockerfile_menu')],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='services')]
            ]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            await callback.message.edit_text('üê≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏:', reply_markup=reply_markup)
        else:
            keyboard = [
                [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å", callback_data=f'status_{service}')],
                [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f'restart_{service}')],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='services')]
            ]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            await callback.message.edit_text(f'‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {service}:', reply_markup=reply_markup)

    elif callback.data.startswith('status_'):
        service = callback.data.split('_')[1]
        result = execute_ssh_command('server1', f'systemctl status {service}')
        keyboard = [
            [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f'restart_{service}')],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='services')]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(f'üìä –°—Ç–∞—Ç—É—Å {service}:\n```\n{result}\n```', 
                              reply_markup=reply_markup,
                              parse_mode='Markdown')

    elif callback.data.startswith('restart_'):
        service = callback.data.split('_')[1]
        result = execute_ssh_command('server1', f'sudo systemctl restart {service}')
        status = execute_ssh_command('server1', f'systemctl status {service}')
        keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='services')]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(f'üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ {service}:\n```\n{status}\n```', 
                              reply_markup=reply_markup,
                              parse_mode='Markdown')

    elif callback.data == 'docker_list_all':
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        result = execute_ssh_command('server1', 'docker ps -a --format "{{.Names}}|{{.Status}}"')
        containers = result.strip().split('\n')
        
        keyboard = []
        for container in containers:
            if container:
                name, status = container.split('|')
                emoji = get_container_status_emoji(status)
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"{emoji} {name}",
                        callback_data=f'docker_info_{name}'
                    )
                ])
        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='service_docker')])
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text('üê≥ –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:', reply_markup=reply_markup)

    elif callback.data == 'docker_list_running':
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        result = execute_ssh_command('server1', 'docker ps --format "{{.Names}}|{{.Status}}"')
        containers = result.strip().split('\n')
        
        keyboard = []
        for container in containers:
            if container:
                name, status = container.split('|')
                emoji = get_container_status_emoji(status)
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"{emoji} {name}",
                        callback_data=f'docker_info_{name}'
                    )
                ])
        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='service_docker')])
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text('üê≥ –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:', reply_markup=reply_markup)

    elif callback.data.startswith('docker_info_'):
        container_name = callback.data.replace('docker_info_', '')
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        info = execute_ssh_command('server1', f'docker inspect {container_name}')
        status = execute_ssh_command('server1', f'docker ps -a | grep {container_name}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        is_running = 'Up' in status
        emoji = get_container_status_emoji(status)
        formatted_status = format_container_status(status)
        
        keyboard = []
        if is_running:
            keyboard.extend([
                [InlineKeyboardButton(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f'stop_container_{container_name}')],
                [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f'restart_container_{container_name}')]
            ])
        else:
            keyboard.append([InlineKeyboardButton(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f'start_container_{container_name}')])
        
        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data='docker_list_all')])
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(
            f'üê≥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ:\n\n'
            f'–ò–º—è: {container_name}\n'
            f'–°—Ç–∞—Ç—É—Å: {emoji} {formatted_status}\n\n'
            f'–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n```\n{status}\n```',
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    elif callback.data.startswith('restart_container_'):
        container_name = callback.data.replace('restart_container_', '')
        result = execute_ssh_command('server1', f'docker restart {container_name}')
        status = execute_ssh_command('server1', f'docker ps -a | grep {container_name}')
        
        keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É", callback_data=f'docker_info_{container_name}')]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(
            f'üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {container_name}:\n```\n{status}\n```',
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    elif callback.data == 'service_docker':
        keyboard = [
            [InlineKeyboardButton(text="üìã –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã", callback_data='docker_list_all')],
            [InlineKeyboardButton(text="üìù Dockerfile", callback_data='dockerfile_menu')],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='services')]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text('üê≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker:', reply_markup=reply_markup)

    elif callback.data == 'dockerfile_menu':
        keyboard = [
            [InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å Dockerfile", callback_data='dockerfile_upload')],
            [InlineKeyboardButton(text="‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å Dockerfile", callback_data='dockerfile_create')],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='service_docker')]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(
            'üìù –†–∞–±–æ—Ç–∞ —Å Dockerfile:\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n'
            '‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Dockerfile\n'
            '‚Ä¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π Dockerfile —Å –ø–æ–º–æ—â—å—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞',
            reply_markup=reply_markup
        )

    elif callback.data == 'dockerfile_create':
        keyboard = [
            [InlineKeyboardButton(text="üêç Python", callback_data='dockerfile_python')],
            [InlineKeyboardButton(text="üåê Node.js", callback_data='dockerfile_node')],
            [InlineKeyboardButton(text="üîÑ Nginx", callback_data='dockerfile_nginx')],
            [InlineKeyboardButton(text="üóÑ PostgreSQL", callback_data='dockerfile_postgres')],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='dockerfile_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(
            'üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è Dockerfile:\n\n'
            '–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π Dockerfile –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.',
            reply_markup=reply_markup
        )

    elif callback.data.startswith('dockerfile_'):
        template_type = callback.data.replace('dockerfile_', '')
        dockerfile_content = ""
        
        if template_type == 'python':
            dockerfile_content = """# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ Python
FROM python:3.11-slim

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
WORKDIR /app

# –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
COPY requirements.txt .

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
RUN pip install --no-cache-dir -r requirements.txt

# –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
COPY . .

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
CMD ["python", "app.py"]"""
        elif template_type == 'node':
            dockerfile_content = """# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ Node.js
FROM node:18-alpine

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
WORKDIR /app

# –ö–æ–ø–∏—Ä—É–µ–º package.json –∏ package-lock.json
COPY package*.json ./

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
RUN npm install

# –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
COPY . .

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
CMD ["npm", "start"]"""
        elif template_type == 'nginx':
            dockerfile_content = """# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ Nginx
FROM nginx:alpine

# –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
COPY nginx.conf /etc/nginx/conf.d/default.conf

# –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
COPY ./static /usr/share/nginx/html

# –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç
EXPOSE 80

# –ó–∞–ø—É—Å–∫–∞–µ–º Nginx
CMD ["nginx", "-g", "daemon off;"]"""
        elif template_type == 'postgres':
            dockerfile_content = """# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ PostgreSQL
FROM postgres:15

# –ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
COPY ./init-scripts /docker-entrypoint-initdb.d/

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENV POSTGRES_DB=mydb
ENV POSTGRES_USER=myuser
ENV POSTGRES_PASSWORD=mypassword

# –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç
EXPOSE 5432"""

        keyboard = [
            [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f'save_dockerfile_{template_type}')],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='dockerfile_create')]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(
            f'üìù Dockerfile –¥–ª—è {template_type}:\n\n'
            f'```dockerfile\n{dockerfile_content}\n```\n\n'
            '–í—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞.',
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    elif callback.data.startswith('save_dockerfile_'):
        template_type = callback.data.replace('save_dockerfile_', '')
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Dockerfile
        keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='dockerfile_menu')]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(
            f'‚úÖ Dockerfile –¥–ª—è {template_type} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n'
            '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–∞.',
            reply_markup=reply_markup
        )

    elif callback.data == 'dockerfile_upload':
        keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='dockerfile_menu')]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(
            'üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à Dockerfile, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–≥–æ –∫–∞–∫ —Ñ–∞–π–ª –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n\n'
            '–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ –∏ –ø—Ä–µ–¥–ª–æ–∂—É —É–ª—É—á—à–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è.',
            reply_markup=reply_markup
        )

    elif callback.data == 'logs':
        keyboard = [
            [InlineKeyboardButton(text="üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏", callback_data='logs_system')],
            [InlineKeyboardButton(text="üê≥ Docker –ª–æ–≥–∏", callback_data='logs_docker')],
            [InlineKeyboardButton(text="üåê Nginx –ª–æ–≥–∏", callback_data='logs_nginx')],
            [InlineKeyboardButton(text="üóÑ PostgreSQL –ª–æ–≥–∏", callback_data='logs_postgres')],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(
            'üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–æ–≥–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:',
            reply_markup=reply_markup
        )

    elif callback.data == 'logs_system':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await show_loading(callback.message, "üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏
        journalctl = execute_ssh_command('server1', 'journalctl -n 100 --no-pager')
        await save_and_send_log(callback.message, journalctl, "–°–∏—Å—Ç–µ–º–Ω—ã–µ")
        
        keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='logs')]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(
            '‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.',
            reply_markup=reply_markup
        )

    elif callback.data == 'logs_docker':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await show_loading(callback.message, "üê≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ Docker...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        containers = execute_ssh_command('server1', 'docker ps -a --format "{{.Names}}"')
        containers = containers.strip().split('\n')
        
        # –°–æ–±–∏—Ä–∞–µ–º –ª–æ–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        all_logs = []
        for container in containers:
            if container:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–µ –ø—É—Å—Ç–æ–µ
                container_logs = execute_ssh_command('server1', f'docker logs --tail 50 {container}')
                all_logs.append(f"\n=== –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {container} ===\n{container_logs}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ª–æ–≥–∏
        docker_logs = "\n".join(all_logs)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏
        await save_and_send_log(callback.message, docker_logs, "Docker")
        
        keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='logs')]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(
            '‚úÖ –õ–æ–≥–∏ Docker —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.',
            reply_markup=reply_markup
        )

    elif callback.data == 'logs_nginx':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await show_loading(callback.message, "üåê –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ Nginx...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ Nginx
        nginx_logs = execute_ssh_command('server1', 'tail -n 100 /var/log/nginx/access.log /var/log/nginx/error.log')
        await save_and_send_log(callback.message, nginx_logs, "Nginx")
        
        keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='logs')]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(
            '‚úÖ –õ–æ–≥–∏ Nginx —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.',
            reply_markup=reply_markup
        )

    elif callback.data == 'logs_postgres':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await show_loading(callback.message, "üóÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ PostgreSQL...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ PostgreSQL
        postgres_logs = execute_ssh_command('server1', 'tail -n 100 /var/log/postgresql/postgresql-*.log')
        await save_and_send_log(callback.message, postgres_logs, "PostgreSQL")
        
        keyboard = [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='logs')]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(
            '‚úÖ –õ–æ–≥–∏ PostgreSQL —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.',
            reply_markup=reply_markup
        )

async def handle_ping(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–∏–Ω–≥–∞."""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.')
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –ø–∏–Ω–≥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        address = message.text.split()[1]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∏–Ω–≥
        result = execute_ssh_command('server1', f'ping -c 4 {address}')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await message.answer(f"üèì –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∏–Ω–≥–∞ {address}:\n```\n{result}\n```", 
                           parse_mode='Markdown')
    except IndexError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–∏–Ω–≥–∞.\n–ü—Ä–∏–º–µ—Ä: /ping 8.8.8.8")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–∏–Ω–≥–∞: {str(e)}")

async def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.message.register(start, Command(commands=["start"]))
    dp.message.register(handle_menu)
    dp.message.register(handle_ping, Command(commands=["ping"]))
    dp.callback_query.register(handle_callback)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
